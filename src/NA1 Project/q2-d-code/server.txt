import java.io.BufferedReader;
	import java.io.InputStreamReader;
	import java.io.PrintStream;
	import java.io.IOException;
	import java.net.Socket;
	import java.net.ServerSocket;
	
	public class MultiThreadChatServer {
	
	  private static ServerSocket serverSocket = null;
	  private static Socket clientSocket = null;
	  private static final int maxClientConections = 10;
	  private static final clientThread[] threads = new clientThread[maxClientConections];
	
	  public static void main(String args[]) {
	    try {
	      serverSocket = new ServerSocket(4567);
	    } catch (IOException e) {
	      System.out.println("Server Connection error"+e);
	    }
	
	    while (true) {
	      try {
	        clientSocket = serverSocket.accept();
	        int i = 0;
	        for (i = 0; i < maxClientConections; i++) {
	          if (threads[i] == null) {
	            (threads[i] = new clientThread(clientSocket, threads)).start();
	            break;
	          }
	        }
	        if (i == maxClientConections) {
	          PrintStream os = new PrintStream(clientSocket.getOutputStream());
	          os.println("Server reached max connection limit.");
	          os.close();
	          clientSocket.close();
	        }
	      } catch (IOException e) {
	        System.out.println(e);
	      }
	    }
	  }
	}
	
	class clientThread extends Thread {
	
	  private BufferedReader inputStream = null;
	  private PrintStream outStream = null;
	  private Socket clientSocket = null;
	  private final clientThread[] threads;
	  private int maxClientConections;
	
	  public clientThread(Socket clientSocket, clientThread[] threads) {
	    this.clientSocket = clientSocket;
	    this.threads = threads;
	    maxClientConections = threads.length;
	  }
	
	  public void run() {
	    int maxClientConections = this.maxClientConections;
	    clientThread[] threads = this.threads;
	
	    try {
	      inputStream = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
	      outStream = new PrintStream(clientSocket.getOutputStream());
	      outStream.println("Please Input your name:");
	      String name = inputStream.readLine().trim();
	      for (int i = 0; i < maxClientConections; i++) {
	        if (threads[i] != null && threads[i] != this) {
	          threads[i].outStream.println("New connection from "+ name);
	        }
	      }
	      while (true) {
	        String line = inputStream.readLine();
	        System.out.println(line);
	        if (line.startsWith("quit")) {
	          break;
	        }
	        for (int i = 0; i < maxClientConections; i++) {
	          if (threads[i] != null) {
	            threads[i].outStream.println("<" + name + ">" + line);
	          }
	        }
	      }
	      for (int i = 0; i < maxClientConections; i++) {
	        if (threads[i] != null && threads[i] != this) {
	          threads[i].outStream.println("connection closed!");
	        }
	      }
	      outStream.println("Bye " + name);
	      for (int i = 0; i < maxClientConections; i++) {
	        if (threads[i] == this) {
	          threads[i] = null;
	        }
	      }
	      inputStream.close();
	      outStream.close();
	      clientSocket.close();
	    } catch (IOException e) {
	    }
	  }
	}
	
